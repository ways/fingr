[project]
name = "fingr"
version = "1.0.0"
description = "Finger server, serving weather forecast based on location input"
readme = "README.md"
requires-python = ">=3.8"
license = {text = "GPL-3.0-or-later"}
authors = [
    {name = "Lars Falk-Petersen", email = "dev@falkp.no"}
]
keywords = ["finger", "weather"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: System :: Networking",
    "Operating System :: POSIX :: Linux",
    "Environment :: Console",
    "Topic :: Internet :: Finger",
]

dependencies = [
    "metno-locationforecast>=1.2",
    "geopy~=2.4.0",
    "redis~=5.0.0",
    "async_timeout", # redis dep
    "pysolar==0.11",
    "timezonefinder~=6.5.0",
    "pytz==2024.2",
]

[project.optional-dependencies]
dev = [
    "bandit",
    "tox",
    "ruff",
    "types-pytz",
    "types-redis",
    "fakeredis",
]

[project.urls]
Homepage = "https://github.com/ways/fingr"
Repository = "https://github.com/ways/fingr"

[build-system]
requires = ["setuptools>=45", "wheel"]
build-backend = "setuptools.build_meta"

[tool.setuptools]
packages = []

# Ruff configuration
[tool.ruff]
line-length = 100
target-version = "py38"

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
]
ignore = [
    "E501",  # line too long (handled by formatter)
]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"

# Tox configuration
[tool.tox]
requires = ["tox>=4", "tox-uv"]
env_list = ["py", "ruff-format", "ruff-check", "bandit"]

[tool.tox.env_run_base]
description = "Run unit tests"
extras = ["dev"]
commands = [["python3", "-m", "unittest", "fingr_test.py"]]

[tool.tox.env.ruff-check]
description = "Run ruff linter"
deps = ["ruff"]
commands = [["ruff", "check", "--fix", "{toxinidir}/fingr.py"]]

[tool.tox.env.ruff-format]
description = "Check code formatting with ruff"
deps = ["ruff"]
commands = [["ruff", "format", "{toxinidir}/fingr.py"]]

[tool.tox.env.mypy]
description = "Check typing"
deps = ["mypy", "types-pytz"]
commands = [["mypy", "--follow-imports", "skip", "{toxinidir}/fingr.py"]]

[tool.tox.env.bandit]
description = "Check for security issues"
deps = ["bandit"]
commands = [["bandit", "{toxinidir}/fingr.py"]]
